// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// DeleteProfilePicture provides a mock function with given fields: ctx, imageURL
func (_m *Storage) DeleteProfilePicture(ctx context.Context, imageURL string) error {
	ret := _m.Called(ctx, imageURL)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfilePicture")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, imageURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfilePicture provides a mock function with given fields: ctx, file, id
func (_m *Storage) UpdateProfilePicture(ctx context.Context, file io.Reader, id string) (string, error) {
	ret := _m.Called(ctx, file, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfilePicture")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, string) (string, error)); ok {
		return rf(ctx, file, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, string) string); ok {
		r0 = rf(ctx, file, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.Reader, string) error); ok {
		r1 = rf(ctx, file, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadProfilePicture provides a mock function with given fields: ctx, file, id
func (_m *Storage) UploadProfilePicture(ctx context.Context, file io.Reader, id string) (string, error) {
	ret := _m.Called(ctx, file, id)

	if len(ret) == 0 {
		panic("no return value specified for UploadProfilePicture")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, string) (string, error)); ok {
		return rf(ctx, file, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, string) string); ok {
		r0 = rf(ctx, file, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.Reader, string) error); ok {
		r1 = rf(ctx, file, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
