// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	magistrala "github.com/absmach/magistrala"

	mock "github.com/stretchr/testify/mock"
)

// AuthServiceClient is an autogenerated mock type for the AuthServiceClient type
type AuthServiceClient struct {
	mock.Mock
}

type AuthServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthServiceClient) EXPECT() *AuthServiceClient_Expecter {
	return &AuthServiceClient_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) Authenticate(ctx context.Context, in *magistrala.AuthenticateReq, opts ...grpc.CallOption) (*magistrala.AuthenticateRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *magistrala.AuthenticateRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.AuthenticateReq, ...grpc.CallOption) (*magistrala.AuthenticateRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.AuthenticateReq, ...grpc.CallOption) *magistrala.AuthenticateRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.AuthenticateRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.AuthenticateReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceClient_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type AuthServiceClient_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.AuthenticateReq
//   - opts ...grpc.CallOption
func (_e *AuthServiceClient_Expecter) Authenticate(ctx interface{}, in interface{}, opts ...interface{}) *AuthServiceClient_Authenticate_Call {
	return &AuthServiceClient_Authenticate_Call{Call: _e.mock.On("Authenticate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthServiceClient_Authenticate_Call) Run(run func(ctx context.Context, in *magistrala.AuthenticateReq, opts ...grpc.CallOption)) *AuthServiceClient_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.AuthenticateReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthServiceClient_Authenticate_Call) Return(_a0 *magistrala.AuthenticateRes, _a1 error) *AuthServiceClient_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceClient_Authenticate_Call) RunAndReturn(run func(context.Context, *magistrala.AuthenticateReq, ...grpc.CallOption) (*magistrala.AuthenticateRes, error)) *AuthServiceClient_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Authorize provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) Authorize(ctx context.Context, in *magistrala.AuthorizeReq, opts ...grpc.CallOption) (*magistrala.AuthorizeRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 *magistrala.AuthorizeRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.AuthorizeReq, ...grpc.CallOption) (*magistrala.AuthorizeRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.AuthorizeReq, ...grpc.CallOption) *magistrala.AuthorizeRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.AuthorizeRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.AuthorizeReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceClient_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type AuthServiceClient_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.AuthorizeReq
//   - opts ...grpc.CallOption
func (_e *AuthServiceClient_Expecter) Authorize(ctx interface{}, in interface{}, opts ...interface{}) *AuthServiceClient_Authorize_Call {
	return &AuthServiceClient_Authorize_Call{Call: _e.mock.On("Authorize",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthServiceClient_Authorize_Call) Run(run func(ctx context.Context, in *magistrala.AuthorizeReq, opts ...grpc.CallOption)) *AuthServiceClient_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.AuthorizeReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthServiceClient_Authorize_Call) Return(_a0 *magistrala.AuthorizeRes, _a1 error) *AuthServiceClient_Authorize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceClient_Authorize_Call) RunAndReturn(run func(context.Context, *magistrala.AuthorizeReq, ...grpc.CallOption) (*magistrala.AuthorizeRes, error)) *AuthServiceClient_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthServiceClient creates a new instance of AuthServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceClient {
	mock := &AuthServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
